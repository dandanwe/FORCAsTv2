c     subroutine wprofil(vg,alphab,wind)
      subroutine wprofil(vg,alphab,wind,tstamp)
      USE cacm3_Precision, ONLY:dp 
c      subroutine wprofil(ustara,vg,alphab,wind,tstamp)
c Wind profile (roughly based on Baldocchi, 1988)

      !shc implicit double precision (a-h,o-z)
      implicit none !shc
      !shc The following declarations are added so I can use "implicit none"
      INTEGER NLEV,NSOIL
      INTEGER lev
      DOUBLE PRECISION    ALPHAB,      TSTAMP,      VG
      DOUBLE PRECISION    WIND
      DOUBLE PRECISION    D,           UH,          VK
      DOUBLE PRECISION    Z0M,         ZR
      DOUBLE PRECISION    HCPY,        HTR,         SIZELF,      TLAI
      DOUBLE PRECISION    ZROUGH
      INTEGER             LEVCPY,      LEVHTR

      parameter (nlev=40,nsoil=15)    ! number of levels  
      dimension wind(nlev)
      double precision ustara
      REAL(KIND=dp) :: Z, ZF, DZ, DZF
      common/height/z(nlev),zf(nlev),dz(nlev),dzf(nlev)
      common /cpy/ hcpy,htr,tlai,levcpy,levhtr,zrough,sizelf
       
c Get ustara from measured wind
          ustara=vg/30. 
c          vk     = 0.4
c          zr     = 36.4
c          d      = 2./3.*hcpy
c          z0m    = zrough
c          ustara = (vk*vg)/dlog((zr-d)/z0m)
          uh=ustara*dlog((z(levcpy+1)-0.8*hcpy)/zrough)/0.4 !estimate    
c ######### For test purposes you may modify the parameters of the wind profile
      do lev=1,nlev
       if(z(lev).ge.0.95*hcpy) then
        wind(lev)=ustara*dlog((z(lev)-0.85*hcpy)/zrough)/0.4
       else
        wind(lev)=uh*exp(-alphab*(1.-z(lev)/(hcpy)))  
c        wind(lev)=uh*exp(-alphab*((hcpy-z(lev))/(hcpy-htr)))
       endif
c       wind(levcpy)=0.2*wind(levcpy+1)+0.8*wind(levcpy-1)
      enddo
      wind(1)=0.

c Test for (practically) bare soil
      if(tlai.le.0.05) then
       do lev=1,nlev
        if(lev.ne.1) 
     & wind(lev)=ustara*dlog((z(lev))/0.01 )/0.4
       enddo
      endif

      return
      end


c***************************************************************
!ka      subroutine atk(rlat,z,wind,akh,ajnn,lprin)
      subroutine atk(vg, rlat,z,wind,akh,ajnn,lprin,tstamp, ustarb)
!ka - added tstamp for diagnostic output
!ddw - added ustarb for akh
c***************************************************************

      !shc implicit double precision (a-h,o-z)
      implicit none !shc
      !shc The following declarations are added so I can use "implicit none"
      INTEGER NLEV
      DOUBLE PRECISION    AJNN,        AKH,         RLAT
      DOUBLE PRECISION    WIND,        Z
      DOUBLE PRECISION    AIRMOL,      AK,          AKHST
      DOUBLE PRECISION    AKM,         AKMST,       ALL,         CORIOL
      DOUBLE PRECISION    DZ,          GRAV,        RI
      DOUBLE PRECISION    STRAT,       THELAM,      TM,          VZBET
      DOUBLE PRECISION    VZBET2,                   XLAM,        XX0
      DOUBLE PRECISION    XXH,         ZM
      DOUBLE PRECISION    zi, zb, Sc, ustarb, vg, acontin, Lmonin
      DOUBLE PRECISION    e, psat,  spechumid 
      INTEGER             IM,          IP,          K
      DOUBLE PRECISION    P,           RELH,        RHOAIR
      DOUBLE PRECISION    T,           THETA,       hvkms, thetav
      DOUBLE PRECISION    HCPY,        HTR,         SIZELF,      TLAI
      DOUBLE PRECISION    ZROUGH
      INTEGER             LEVCPY,      LEVHTR
      DOUBLE PRECISION    ALPHADAY,    ALPHAN,      VGDAY,       VGN
      DOUBLE PRECISION    ZRDAY,       ZRN
      REAL   TIMLOC, DELTIM
      INTEGER             ICUMDY,      IYEAR,       JDAY,        MONTH
      !shc end of adding declarations to allow "implicit none"

c simple formulation of exchange coefficient following Blackadar

      parameter (nlev=40)    ! number of levels  
      common /cpy/ hcpy,htr,tlai,levcpy,levhtr,zrough,sizelf
      common/timpar/ timloc,deltim,month,jday,iyear,icumdy
      dimension z(nlev),wind(nlev),akm(nlev),akh(nlev),hvkms(nlev)
      dimension thetav(nlev)
      common/atmo1/ t(nlev),theta(nlev),p(nlev),rhoair(nlev)
     & ,relh(nlev)
      !shc common/stratpar/ stable,vgday,vgn,zrday,zrn,alphaday,alphan
      common/stratpar/ vgday,vgn,zrday,zrn,alphaday,alphan,stable !shc
      logical stable

      dimension ajnn(nlev),akhst(nlev),akmst(nlev),fct(nlev)
      logical konv,lprin
      data akm/nlev*0./

c ALLOCATE ARRAYS FOR PRINTING TO OUTPUT (AMB, 11/1/10)
      DIMENSION ALL(NLEV), STRAT(NLEV), VZBET2(NLEV), RI(NLEV), 
     +   XLAM(NLEV), KONV(NLEV)
      double precision tstamp,fct  !ka - added for diagnostic output
       
c     ========== PARAMETERS =========     
      ak      = 0.4
      grav    = 9.81
      airmol  = 0.1529e-04
      coriol  = 1./3600./6.*3.1415*sin(rlat)
      thelam  = 2.7e-04*wind(nlev-1)/coriol
      
      ! added by ddw for test purpose
      zi      = 800.0
      zb      = 0.1*zi
      Sc      = 1.3
      acontin = 1.0/(1.0-zb/zi)**2      
      xx0     = 0.
      xxh     = 0.
c     ============== SMOOTHING ????  ========= 
      do k=1,nlev
c         e = vcp(k,lh2o)*p(k)
         psat=611.2*exp(17.67*(t(k)-273.15)/(t(k)-29.65))  ! in Pa
         e = relh(k)*psat
         spechumid = 0.622*e/(p(k)-0.378*e)    ! in Kg/Kg
         theta(k)  = t(k)*((100000.0/p(k))** .286)
         thetav(k) = theta(k)*(1.0+0.61*spechumid)
         rhoair(k) = p(k)/287./t(k)
         im=max(k-1,1)
         ip= min(k+1,nlev)
         akhst(k)=0.05*akh(k)+0.90*akh(im)+0.05*akh(ip)+airmol
         akmst(k)=0.05*akm(k)+0.90*akm(im)+0.05*akm(ip)+airmol
      enddo
c     ======================================== 


cc     ============== LOOP of xx0 (boundary layer height) at each level ========= 
c      do k=1,nlev-1
c         im=max(k-1,1)
c         ip=min(k+1,nlev)
c         dz=z(k+1)-z(k)
c         strat(k)=(theta(k+1)-theta(k))/dz
c         
c         ! Above the canopy
c         if(k.ge.levcpy) then
c           if(strat(k).le.0.0) then   ! unstable
c             xx0=xx0+(z(ip)-z(k))
c             konv(k)=(theta(k)+0.1).lt.theta(1)
c             ! xxh estimation (don't know what xxh is)
c             if(konv(k)) then
c               if(xxh.le.0.) xxh=z(k)
c             endif
c           else                       ! stable 
c             konv(k)=.false.
c           endif
c         endif
c      
c      enddo
cc     =========================    END of the LOOP   =============================      
c
c      xx0 = 2000.0      

c     ====================== LOOP of K at each level =============== 
      do k=1,nlev-1
         
         dz=z(k+1)-z(k)
         strat(k)=(theta(k+1)-theta(k))/dz
         vzbet=(wind(k+1)-wind(k))/dz
         zm=0.5*(z(k)+z(k+1))
         tm=0.5*(t(k)+t(k+1))
         vzbet2(k)=vzbet*vzbet
         ri(k)=grav*strat(k)/(tm*vzbet2(k))
         
c        ---------------------- K in boundary layer by ddw ------------ 
         if(zm.lt.zb) then
           ajnn(k) = ak*ustarb*zm/Sc
         elseif (zm.ge.zb.and.zm.lt.zi) then
           ajnn(k) = acontin*ak*ustarb*zm*(1.0-zm/zi)**2.0/Sc
         end if 
         
c        ---------------------- K within canopy  ----------------
         if (k.lt.levcpy) then
            xlam(k)=2.
            all(k)=ak*zm/(1.0+ak*zm/xlam(k))
            ajnn(k)=(all(k)**2)*sqrt(vzbet2(k))
c            if(k.lt.levhtr) ajnn(k)=ajnn(k)*50 
         endif
               
c        ---------------------- K in free atmosphere ----------------
         if (zm.ge.zi) then
            xlam(k)=thelam
            all(k)=ak*(zm-0.85*hcpy)/(1.0+ak*(zm-0.85*hcpy)/xlam(k))
            ajnn(k)=(all(k)**2)*sqrt(vzbet2(k)) 
         endif
         
c        ----------------------- ddw Stability correction -----------------      
          ! Calculate Monin-Obukhov length
          hvkms(k)=-akh(k)*Sc*(thetav(k+1)-thetav(k-1))/(z(k+1)-z(k-1)) 
          Lmonin  = -(ustarb**3.0*thetav(k))/(ak*grav*hvkms(k)) 
          if(Lmonin.gt.0.0) then
            akh(k)=ajnn(k) / (1.0+5.0*zm/Lmonin)
          elseif(Lmonin.lt.0.0) then
            akh(k)=ajnn(k) / (1.0-16.0*zm/Lmonin)**(-1.0/2.0)
          endif
         
c        ---------------------------     smoothing      -----------------      
c         akm(k)=0.1*akmst(k)+0.9*akm(k)
          akh(k)=0.1*akhst(k)+0.9*akh(k)
      
      enddo

c     ======================  END of LOOP  =============== 
      
      if(lprin) then  
        do k  =nlev-1,1,-1
           zm =0.5*(z(k)+z(k+1))
           strat(k)=(theta(k+1)-theta(k))/dz
           vzbet=(wind(k+1)-wind(k))/dz
           vzbet2(k)=vzbet*vzbet
           ri(k)=grav*strat(k)/(tm*vzbet2(k))       
        enddo
      endif


      
      return
      end


      subroutine solve(ab,bb,db,at,bt,dt,a,b,c,d,var,nr)
      !shc implicit double precision (a-h,o-z)
      implicit none !shc
      !shc The following declarations are added so I can use "implicit none"
      INTEGER             NLEV
      DOUBLE PRECISION    A,           AB,          AT,          B
      DOUBLE PRECISION    BB,          BT,          C,           D
      DOUBLE PRECISION    DB,          DT,          VAR
      INTEGER             NR
      DOUBLE PRECISION    ALPHA,       BETA,        XX
      INTEGER             I,           J,           JJ,          L
      INTEGER             M1
      !shc end of adding declarations to allow "implicit none"
      save
c
c      solve tridiagonal system to calculate new values (atmosphere)
c 
      parameter(nlev=40)
      dimension a(nlev),b(nlev),c(nlev),d(nlev),
     &alpha(nlev),beta(nlev),xx(nlev),var(nlev)

c      if(var(22).gt.273.)  print*,'ab,bb,at,bt in solve = ', ab,
c     &bb,at,bt

      alpha(nr)=-bb/ab
      beta(nr)=db/ab
      m1=nlev-1

      do 4 j=nr+1,m1
      xx(j)=(a(j)*alpha(j-1)+b(j))
      alpha(j)=-c(j)/xx(j)
   4  beta(j)=-(a(j)*beta(j-1)-d(j))/xx(j)

      var(nlev)=(dt-at*beta(m1))/(bt+alpha(m1)*at)


      do 5 jj=nr,m1
      j=nlev-jj
      var(j)=var(j+1)*alpha(j)+beta(j)
      if(var(j).lt.0.) var(j)=.0001*var(j+1)
   5  continue
      
      

      if(nr.eq.1)return
      l=nr-1
      do 7 i=1,l
   7  var(i)=var(nr)

      return
      end

c **************************************************************
      subroutine newt(akh)                                        
      USE cacm3_Precision, ONLY:dp 
c Subroutine to calculate vertical exchange of energy; updates
c air temperature for each model layer       
c **************************************************************
      !shc implicit double precision (a-h,o-z)
      implicit none !shc
      !shc The following declarations are added so I can use "implicit none"
      INTEGER             NLEV
      DOUBLE PRECISION    AKH
      DOUBLE PRECISION    AB,          AT,          BB,          BT
      DOUBLE PRECISION    DB,          DT,          P0,          RHOCP
      DOUBLE PRECISION    SOURCT,                   X
      INTEGER             K,           NR
      DOUBLE PRECISION    P,           RELH,        RHOAIR
      DOUBLE PRECISION    T,           THETA
      DOUBLE PRECISION    EVAPS,       HEATS
      DOUBLE PRECISION    A0,          B0,          C0,          DEL
      DOUBLE PRECISION    ZMIN1,       ZMIN2
      DOUBLE PRECISION    BMFLX,       D,           RNDIV
      DOUBLE PRECISION    RNET,        RNLAM,       TSFC
      DOUBLE PRECISION    UI
      REAL                TIMLOC, deltim
      INTEGER             ICUMDY,      IYEAR,       JDAY,        MONTH
      REAL(KIND=dp) ::    Z, ZF, DZ, DZF
      !shc end of adding declarations to allow "implicit none"
      save
      parameter(nlev=40)
      common/timpar/timloc,deltim,month,jday,iyear,icumdy
      common/height/z(nlev),zf(nlev),dz(nlev),dzf(nlev)
      common/grid/ del,zmin1,zmin2,a0(nlev),b0(nlev),c0(nlev)
      common/cpysrc/ evaps(99),heats(99)
      common/rad4/d(3,99),ui(3,99),bmflx(3,99),rnet(99),rndiv(99),
     & tsfc,rnlam(3,99)
      common/atmo1/ t(nlev),theta(nlev),p(nlev),rhoair(nlev)
     & ,relh(nlev)
      dimension akh(nlev),
     & sourct(nlev),x(nlev)
      
      
      p0=100000.0
      do k=1,nlev
      theta(k)=t(k)*((p0/p(k))** .286)
      enddo
      
      do k=2,nlev-1
      rhocp=1200.*p(k)/101300.
c     sourct(k)=0.5*(heats(k)+heats(k-1))/rhocp /dz(k)
      sourct(k)=heats(k-1)/rhocp /dz(k)

c a0 coefficient for implicit solver altered by SC/KA (Nov 2014)
c based on Taylor expansion of continuity equation
       a0(k)=-akh(k-1)/dzf(k)/dz(k-1)*deltim
cxc       a0(k)=-akh(k)/dzf(k)/dz(k-1)*deltim
       c0(k)=-akh(k)/dzf(k)/dz(k)*deltim
       b0(k)=1.+(-a0(k)-c0(k))
c
c Crank-Nicholson explicit solution scheme
c but there is likely still an error in here
c  
c       deltak=(akh(k)-akh(k-1))
c     akhm=0.5*akh(k-1)+0.5*akh(k)
c     s=(k-1)*del
c     yy=zmin1*exp(s)
c     xx=yy+zmin2
c     xdsi=1.0/(xx*xx*del*del)
c     xdsih=0.5*xdsi
c New:
c     a0(k)=( deltak*xdsih-akhm*yy/xx*xdsih-akhm*xdsi)*deltim
c     b0(k)=1.+2.*akhm*xdsi*deltim
c     c0(k)=(-deltak*xdsih+akhm*yy/xx*xdsih-akhm*xdsi)*deltim
      x(k)=theta(k)+((p0/p(k))**.286)*sourct(k)*deltim                
      enddo
c      print*, 'sourct(9)=', sourct(9)
c Boundary conditions might still need to be improved   
      nr=1
      at=0.0
      bt=1.0
      dt=theta(nlev)
      ab=1.0
      bb=0.0
      db=(tsfc+273.15)*((p0/p(1))**.286)     !preliminary

!      print*, 'tsfc', tsfc
!      print*, 'dt', dt
!      print*, 'a0', a0
!      print*, 'b0', b0
!      print*, 'c0', c0
!      print*, 'x', sourct(17)
!      print*, 'theta', theta(17)
c **************************************************************
c     solve tridiagonal system to calculate new values of theta    
      call solve(ab,bb,db,at,bt,dt,a0,b0,c0,x,theta,nr)
c **************************************************************
      
!      print*, 'after', theta(17)
      do k=1,nlev
       t(k)=theta(k)/((100000.0/p(k))**.286)
      enddo

      return
      end


c **************************************************************
c subroutine newc(akh,vcnc)
c Subroutine to calculate vertical exchange of matter; updates
c gas- and particle-phase concentrations for each model layer  
c **************************************************************
      subroutine newc(akh,vcp,vcnc,vset) !shc added vset
      USE parameters
!      USE cacm_parameters, ONLY:nspec
      USE cacm3_Precision, ONLY:dp 
      USE module_interf
      !shc implicit double precision (a-h,o-z)
      implicit none !shc
      !shc The following declarations are added so I can use "implicit none"
!      INTEGER             NLEV
      INTEGER             MAXRECT
!      INTEGER             NSPEC, ndspec	!ka - added deposition of meoh and etoh; added ndspec
!      INTEGER             NRECT
      INTEGER             NVARS
      DOUBLE PRECISION    AKH
      DOUBLE PRECISION    VCP
      DOUBLE PRECISION    AB,          AT,          BB,          BT
      DOUBLE PRECISION    CS,          DB,          DTT,          X
      INTEGER             JSPEC,       K,           NR
      DOUBLE PRECISION    P,           RELH,        RHOAIR
      DOUBLE PRECISION    T,           THETA
      DOUBLE PRECISION    A0,          B0,          C0,          DEL
      DOUBLE PRECISION    ZMIN1,       ZMIN2
      real(kind=dp)    DZ,          DZF,         Z,  ZF
      DOUBLE PRECISION    DEPN,                     DEPR
      DOUBLE PRECISION    DEPRAT,                   SOURCE
      REAL                TIMLOC, deltim
      INTEGER             ICUMDY,      IYEAR,       JDAY,        MONTH
      !shc end of adding declarations to allow "implicit none"
      double precision  vset !shc settling velocity for aerosol
!      integer ncacm,nmpmpo,nvarspc,ind_aers12
!      parameter (ncacm=351,nmpmpo=11,nfix=5) !shc ncacm === nspec in cacm_Parameters.f90; updated for cacm2.0 ka
!      parameter (ind_aers12=39) !shc same as cacm_Parameter.f90; updated for cacm2.0 ka
!      parameter (ind_H2O=349) !ka same as cacm_Parameter.f90
      save
!      parameter(nlev=40)
      parameter(maxrect=500)
!      parameter (nspec=84, ndspec=86, nrect=249)!ka - added deposition of meoh and etoh; added ndspec
      parameter (nvars=nspec) !shc ddw 2019
      double precision  a0p(nlev), b0p(nlev), c0p(nlev) !shc Crank-Nicolson coefficients for particles

      common/timpar/timloc,deltim,month,jday,iyear,icumdy
      common/height/z(nlev),zf(nlev),dz(nlev),dzf(nlev)
      common/atmo1/ t(nlev),theta(nlev),p(nlev),rhoair(nlev)
     & ,relh(nlev)
      common/grid/ del,zmin1,zmin2,a0(nlev),b0(nlev),c0(nlev)
      common/quellen/source(nlev,nspec),depn(nlev,nspec),
     & deprat(nlev,nspec),depr(nspec)		!ka - added deposition of meoh and etoh; altered nspec to ndspec

      dimension akh(nlev),vcp(nlev,nspec),vcnc(nlev,nvars)
      double precision vcnc
      dimension x(nlev),cs(nlev)

c Turbulent transport - solved with simple implicit scheme
c Water vapor is included
! 
!      do k=2,nlev-1
!cxc a0 coefficient for implicit solver altered by SC/KA (Nov 2014)
!c based on Taylor expansion of continuity equation
!       a0(k)=-akh(k-1)/dzf(k)/dz(k-1)*deltim
!cxc       a0(k)=-akh(k)/dzf(k)/dz(k-1)*deltim
!       c0(k)=-akh(k)/dzf(k)/dz(k)*deltim
!       b0(k)=1.+(-a0(k)-c0(k))
!
!       a0p(k)= (0.5*vset-akh(k-1)/dzf(k))/dz(k-1)*deltim !shc for particles
!       c0p(k)= (-0.5*vset-akh(k)/dzf(k))/dz(k)*deltim !shc for particles
!       b0p(k) = b0(k)  !shc for particles, same as for gas
!c
!c Crank-Nicholson explicit solution scheme
!c but there is likely still an error in here
!c  
!cxc       deltak=(akh(k)-akh(k-1)) 
!cxc       akhm=0.7*akh(k-1)+0.3*akh(k)
!cxc       s=(k-1)*del
!cxc       yy=zmin1*exp(s)
!cxc       xx=yy+zmin2
!cxc       xdsi=1.0/(xx*xx*del*del) 
!cxc       xdsih=0.5*xdsi
!
!cxc     a0(k)=( deltak*xdsih-akhm*yy/xx*xdsih-akhm*xdsi)*deltim
!cxc     b0(k)=1.+2.*akhm*xdsi*deltim
!cxc     c0(k)=(-deltak*xdsih+akhm*yy/xx*xdsih-akhm*xdsi)*deltim
!      enddo
!
!      do 20 jspec=1,nvars               ! species loop for transport
!       do k=1,nlev
!        if (jspec.eq.ind_H2O) then
!c Add latent heat fluxes to water vapour concentration here
!         vcnc(k,jspec)=vcp(k,lh2o)+source(k,lh2o)*deltim 
!        endif
!cxc       cs(k)=vcnc(k,jspec)*rhoair(k)
!        cs(k)=(max(vcp(k,jspec),0.d0))  !shc "0."->"0.d0
!       enddo
!
!       do k=2,nlev-1
!         x(k)=cs(k)+source(k,jspec)*deltim
!       enddo
!
!       at=0.0
!       bt=1.0
!       dtt=cs(nlev)
!cxc Lower boundary at soil surface
!       ab=1.0
!       bb=0.0
!       db=cs(2)  !+ source(1,jspec)*deltim     !preliminary
!       if(jspec.eq.ind_H2O) db=cs(1)  ! Taking into account the boundary conditions!
!cxc Boundary conditions might need to be improved  
!       nr=1
!c############################################################
!!shc modified below to account for particle sedimentation velocity
!!shccxc Don't transport the fixed species (except h2o vapour)
!!shc      if ((jspec.le.300).or.(jspec.eq.303).or.(jspec.ge.307)) then 
!!shc       call solve(ab,bb,db,at,bt,dt,a0,b0,c0,x,cs,nr)
!!shc      endif
!!      if ( ((jspec.le.nvarspc).and.(jspec.ne.ind_aers12) )
!!     &      .or.(jspec.eq.ind_H2O)) then
!!         call solve(ab,bb,db,at,bt,dtt,a0,b0,c0,x,cs,nr)
!!      else if ( (jspec .eq. ind_aers12) .or. 
!!     &          (jspec .gt. ncacm     )  ) then !particles
!!         call solve(ab,bb,db,at,bt,dtt,a0p,b0p,c0p,x,cs,nr) 
!!      endif
!c ddw ############################################################
!
!      do k=1,nlev
!       if(cs(k).lt.-1.e-15) write(06,'(" cs < 0. ",2i3,e12.4)')
!     & jspec, k, cs(k)
!cxc      vcnc(k,jspec)=max(cs(k)/rhoair(k),0.)
!       vcnc(k,jspec)=max(cs(k),0.d0) !shc "0."->"0.d0
!      enddo
! 
!  20  continue        ! End of loop for species
!cxc Update CACHE water vapour (when RACM chemistry is not called)
!      do k=1,nlev
!        vcp(k,lh2o)=vcnc(k,ind_H2O)
!      enddo
! ddw
c---------------------------------------------------------------
c here follows the loop for the RACM species - required if 
c RACM chemistry called
c---------------------------------------------------------------
       do k=2,nlev-1
cxc Old
c a0 coefficient for implicit solver altered by SC/KA (Nov 2014)
c based on Taylor expansion of continuity equation
       a0(k)=-akh(k-1)/dzf(k)/dz(k-1)*deltim
cxc        a0(k)=-akh(k)/dzf(k)/dz(k-1)*deltim
       c0(k)=-akh(k)/dzf(k)/dz(k)*deltim
       b0(k)=1.+(-a0(k)-c0(k))
      enddo
cxc 

       do 30 jspec=1,nspec                ! species loop for transport
       do k=1,nlev
cxc      cs(k)=vcp(k,jspec) *rhoair(k)
        cs(k)=vcp(k,jspec)
       enddo
       
       do k=2,nlev-1
cxc     if(jspec.eq.lh2o) then
       x(k)=cs(k)  + source(k,jspec)*deltim 
cxc     else
cxc     x(k)=cs(k) 
cxc     endif
       enddo

       at=0.0
       bt=1.0
       dtt=cs(nlev)
cxc Lower boundary at soil surface
       ab=1.0
       bb=0.0
       db=cs(2)  + source(1,jspec)*deltim     !preliminary
       if(jspec.eq.lh2o) db=cs(1)  ! Taking into account the boundary conditions!
cxc Boundary conditions might need to be improved  
       nr=1
cxc ----------------------------------------------------------------------
       if(jspec.ne.losd) then ! O3P leads to time-step problems if transported
c       if(jspec.eq.lh2o) print*, 'akh=', akh(22)
       call solve(ab,bb,db,at,bt,dtt,a0,b0,c0,x,cs,nr)
c       if(jspec.eq.lh2o)print*, 'A cs newc=', cs(22)
       endif
cxc ----------------------------------------------------------------------
  
       do k=1,nlev
        if(cs(k).lt.-1.e-15) write(06,'(" cs < 0. ",2i3,e12.4)')
     & jspec, k, cs(k)
cxc      vcp(k,jspec)=max(cs(k)/rhoair(k),0.)
        vcp(k,jspec)=max(cs(k),0.D0)
       enddo
   30  continue                     ! End of loop for species
     
cxc----------------------------------------------------------------------
cxc End of RACM species loop
cxc----------------------------------------------------------------------

      return
      end
